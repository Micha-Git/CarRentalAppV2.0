// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: src/api/specification/api_specification_am_fleet_management.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FleetService_AddCarToFleet_FullMethodName      = "/fleetmanagement.FleetService/AddCarToFleet"
	FleetService_ListCarsInFleet_FullMethodName    = "/fleetmanagement.FleetService/ListCarsInFleet"
	FleetService_RemoveCarFromFleet_FullMethodName = "/fleetmanagement.FleetService/RemoveCarFromFleet"
)

// FleetServiceClient is the client API for FleetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetServiceClient interface {
	AddCarToFleet(ctx context.Context, in *AddCarToFleetRequest, opts ...grpc.CallOption) (*AddCarToFleetResponse, error)
	ListCarsInFleet(ctx context.Context, in *ListCarsInFleetRequest, opts ...grpc.CallOption) (*ListCarsInFleetResponse, error)
	RemoveCarFromFleet(ctx context.Context, in *RemoveCarFromFleetRequest, opts ...grpc.CallOption) (*RemoveCarFromFleetResponse, error)
}

type fleetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetServiceClient(cc grpc.ClientConnInterface) FleetServiceClient {
	return &fleetServiceClient{cc}
}

func (c *fleetServiceClient) AddCarToFleet(ctx context.Context, in *AddCarToFleetRequest, opts ...grpc.CallOption) (*AddCarToFleetResponse, error) {
	out := new(AddCarToFleetResponse)
	err := c.cc.Invoke(ctx, FleetService_AddCarToFleet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) ListCarsInFleet(ctx context.Context, in *ListCarsInFleetRequest, opts ...grpc.CallOption) (*ListCarsInFleetResponse, error) {
	out := new(ListCarsInFleetResponse)
	err := c.cc.Invoke(ctx, FleetService_ListCarsInFleet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) RemoveCarFromFleet(ctx context.Context, in *RemoveCarFromFleetRequest, opts ...grpc.CallOption) (*RemoveCarFromFleetResponse, error) {
	out := new(RemoveCarFromFleetResponse)
	err := c.cc.Invoke(ctx, FleetService_RemoveCarFromFleet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServiceServer is the server API for FleetService service.
// All implementations must embed UnimplementedFleetServiceServer
// for forward compatibility
type FleetServiceServer interface {
	AddCarToFleet(context.Context, *AddCarToFleetRequest) (*AddCarToFleetResponse, error)
	ListCarsInFleet(context.Context, *ListCarsInFleetRequest) (*ListCarsInFleetResponse, error)
	RemoveCarFromFleet(context.Context, *RemoveCarFromFleetRequest) (*RemoveCarFromFleetResponse, error)
	mustEmbedUnimplementedFleetServiceServer()
}

// UnimplementedFleetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFleetServiceServer struct {
}

func (UnimplementedFleetServiceServer) AddCarToFleet(context.Context, *AddCarToFleetRequest) (*AddCarToFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCarToFleet not implemented")
}
func (UnimplementedFleetServiceServer) ListCarsInFleet(context.Context, *ListCarsInFleetRequest) (*ListCarsInFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCarsInFleet not implemented")
}
func (UnimplementedFleetServiceServer) RemoveCarFromFleet(context.Context, *RemoveCarFromFleetRequest) (*RemoveCarFromFleetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCarFromFleet not implemented")
}
func (UnimplementedFleetServiceServer) mustEmbedUnimplementedFleetServiceServer() {}

// UnsafeFleetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetServiceServer will
// result in compilation errors.
type UnsafeFleetServiceServer interface {
	mustEmbedUnimplementedFleetServiceServer()
}

func RegisterFleetServiceServer(s grpc.ServiceRegistrar, srv FleetServiceServer) {
	s.RegisterService(&FleetService_ServiceDesc, srv)
}

func _FleetService_AddCarToFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCarToFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).AddCarToFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetService_AddCarToFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).AddCarToFleet(ctx, req.(*AddCarToFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_ListCarsInFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarsInFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).ListCarsInFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetService_ListCarsInFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).ListCarsInFleet(ctx, req.(*ListCarsInFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_RemoveCarFromFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCarFromFleetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).RemoveCarFromFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetService_RemoveCarFromFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).RemoveCarFromFleet(ctx, req.(*RemoveCarFromFleetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetService_ServiceDesc is the grpc.ServiceDesc for FleetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleetmanagement.FleetService",
	HandlerType: (*FleetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCarToFleet",
			Handler:    _FleetService_AddCarToFleet_Handler,
		},
		{
			MethodName: "ListCarsInFleet",
			Handler:    _FleetService_ListCarsInFleet_Handler,
		},
		{
			MethodName: "RemoveCarFromFleet",
			Handler:    _FleetService_RemoveCarFromFleet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/specification/api_specification_am_fleet_management.proto",
}

const (
	CarService_ViewCarInformation_FullMethodName = "/fleetmanagement.CarService/ViewCarInformation"
)

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	ViewCarInformation(ctx context.Context, in *ViewCarInformationRequest, opts ...grpc.CallOption) (*ViewCarInformationResponse, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) ViewCarInformation(ctx context.Context, in *ViewCarInformationRequest, opts ...grpc.CallOption) (*ViewCarInformationResponse, error) {
	out := new(ViewCarInformationResponse)
	err := c.cc.Invoke(ctx, CarService_ViewCarInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations must embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	ViewCarInformation(context.Context, *ViewCarInformationRequest) (*ViewCarInformationResponse, error)
	mustEmbedUnimplementedCarServiceServer()
}

// UnimplementedCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) ViewCarInformation(context.Context, *ViewCarInformationRequest) (*ViewCarInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewCarInformation not implemented")
}
func (UnimplementedCarServiceServer) mustEmbedUnimplementedCarServiceServer() {}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_ViewCarInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewCarInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).ViewCarInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarService_ViewCarInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).ViewCarInformation(ctx, req.(*ViewCarInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleetmanagement.CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViewCarInformation",
			Handler:    _CarService_ViewCarInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/specification/api_specification_am_fleet_management.proto",
}
