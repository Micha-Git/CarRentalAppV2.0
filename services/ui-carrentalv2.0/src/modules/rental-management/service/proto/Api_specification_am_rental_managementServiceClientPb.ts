/**
 * @fileoverview gRPC-Web generated client stub for rentalmanagement
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.1
// source: api_specification_am_rental_management.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as api_specification_am_rental_management_pb from './api_specification_am_rental_management_pb'; // proto import: "api_specification_am_rental_management.proto"


export class RentalsCollectionServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorListAvailableCars = new grpcWeb.MethodDescriptor(
    '/rentalmanagement.RentalsCollectionService/ListAvailableCars',
    grpcWeb.MethodType.UNARY,
    api_specification_am_rental_management_pb.ListAvailableCarsRequest,
    api_specification_am_rental_management_pb.ListAvailableCarsResponse,
    (request: api_specification_am_rental_management_pb.ListAvailableCarsRequest) => {
      return request.serializeBinary();
    },
    api_specification_am_rental_management_pb.ListAvailableCarsResponse.deserializeBinary
  );

  listAvailableCars(
    request: api_specification_am_rental_management_pb.ListAvailableCarsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_specification_am_rental_management_pb.ListAvailableCarsResponse>;

  listAvailableCars(
    request: api_specification_am_rental_management_pb.ListAvailableCarsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.ListAvailableCarsResponse) => void): grpcWeb.ClientReadableStream<api_specification_am_rental_management_pb.ListAvailableCarsResponse>;

  listAvailableCars(
    request: api_specification_am_rental_management_pb.ListAvailableCarsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.ListAvailableCarsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/rentalmanagement.RentalsCollectionService/ListAvailableCars',
        request,
        metadata || {},
        this.methodDescriptorListAvailableCars,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/rentalmanagement.RentalsCollectionService/ListAvailableCars',
    request,
    metadata || {},
    this.methodDescriptorListAvailableCars);
  }

  methodDescriptorListCarRentals = new grpcWeb.MethodDescriptor(
    '/rentalmanagement.RentalsCollectionService/ListCarRentals',
    grpcWeb.MethodType.UNARY,
    api_specification_am_rental_management_pb.ListCarRentalsRequest,
    api_specification_am_rental_management_pb.ListCarRentalsResponse,
    (request: api_specification_am_rental_management_pb.ListCarRentalsRequest) => {
      return request.serializeBinary();
    },
    api_specification_am_rental_management_pb.ListCarRentalsResponse.deserializeBinary
  );

  listCarRentals(
    request: api_specification_am_rental_management_pb.ListCarRentalsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_specification_am_rental_management_pb.ListCarRentalsResponse>;

  listCarRentals(
    request: api_specification_am_rental_management_pb.ListCarRentalsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.ListCarRentalsResponse) => void): grpcWeb.ClientReadableStream<api_specification_am_rental_management_pb.ListCarRentalsResponse>;

  listCarRentals(
    request: api_specification_am_rental_management_pb.ListCarRentalsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.ListCarRentalsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/rentalmanagement.RentalsCollectionService/ListCarRentals',
        request,
        metadata || {},
        this.methodDescriptorListCarRentals,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/rentalmanagement.RentalsCollectionService/ListCarRentals',
    request,
    metadata || {},
    this.methodDescriptorListCarRentals);
  }

  methodDescriptorListCustomerRentals = new grpcWeb.MethodDescriptor(
    '/rentalmanagement.RentalsCollectionService/ListCustomerRentals',
    grpcWeb.MethodType.UNARY,
    api_specification_am_rental_management_pb.ListCustomerRentalsRequest,
    api_specification_am_rental_management_pb.ListCustomerRentalsResponse,
    (request: api_specification_am_rental_management_pb.ListCustomerRentalsRequest) => {
      return request.serializeBinary();
    },
    api_specification_am_rental_management_pb.ListCustomerRentalsResponse.deserializeBinary
  );

  listCustomerRentals(
    request: api_specification_am_rental_management_pb.ListCustomerRentalsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_specification_am_rental_management_pb.ListCustomerRentalsResponse>;

  listCustomerRentals(
    request: api_specification_am_rental_management_pb.ListCustomerRentalsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.ListCustomerRentalsResponse) => void): grpcWeb.ClientReadableStream<api_specification_am_rental_management_pb.ListCustomerRentalsResponse>;

  listCustomerRentals(
    request: api_specification_am_rental_management_pb.ListCustomerRentalsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.ListCustomerRentalsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/rentalmanagement.RentalsCollectionService/ListCustomerRentals',
        request,
        metadata || {},
        this.methodDescriptorListCustomerRentals,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/rentalmanagement.RentalsCollectionService/ListCustomerRentals',
    request,
    metadata || {},
    this.methodDescriptorListCustomerRentals);
  }

}

export class RentableCarsCollectionServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddCarToRental = new grpcWeb.MethodDescriptor(
    '/rentalmanagement.RentableCarsCollectionService/AddCarToRental',
    grpcWeb.MethodType.UNARY,
    api_specification_am_rental_management_pb.AddCarToRentalRequest,
    api_specification_am_rental_management_pb.AddCarToRentalResponse,
    (request: api_specification_am_rental_management_pb.AddCarToRentalRequest) => {
      return request.serializeBinary();
    },
    api_specification_am_rental_management_pb.AddCarToRentalResponse.deserializeBinary
  );

  addCarToRental(
    request: api_specification_am_rental_management_pb.AddCarToRentalRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_specification_am_rental_management_pb.AddCarToRentalResponse>;

  addCarToRental(
    request: api_specification_am_rental_management_pb.AddCarToRentalRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.AddCarToRentalResponse) => void): grpcWeb.ClientReadableStream<api_specification_am_rental_management_pb.AddCarToRentalResponse>;

  addCarToRental(
    request: api_specification_am_rental_management_pb.AddCarToRentalRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.AddCarToRentalResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/rentalmanagement.RentableCarsCollectionService/AddCarToRental',
        request,
        metadata || {},
        this.methodDescriptorAddCarToRental,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/rentalmanagement.RentableCarsCollectionService/AddCarToRental',
    request,
    metadata || {},
    this.methodDescriptorAddCarToRental);
  }

  methodDescriptorRemoveRentableCar = new grpcWeb.MethodDescriptor(
    '/rentalmanagement.RentableCarsCollectionService/RemoveRentableCar',
    grpcWeb.MethodType.UNARY,
    api_specification_am_rental_management_pb.RemoveRentableCarRequest,
    api_specification_am_rental_management_pb.RemoveRentableCarResponse,
    (request: api_specification_am_rental_management_pb.RemoveRentableCarRequest) => {
      return request.serializeBinary();
    },
    api_specification_am_rental_management_pb.RemoveRentableCarResponse.deserializeBinary
  );

  removeRentableCar(
    request: api_specification_am_rental_management_pb.RemoveRentableCarRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_specification_am_rental_management_pb.RemoveRentableCarResponse>;

  removeRentableCar(
    request: api_specification_am_rental_management_pb.RemoveRentableCarRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.RemoveRentableCarResponse) => void): grpcWeb.ClientReadableStream<api_specification_am_rental_management_pb.RemoveRentableCarResponse>;

  removeRentableCar(
    request: api_specification_am_rental_management_pb.RemoveRentableCarRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.RemoveRentableCarResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/rentalmanagement.RentableCarsCollectionService/RemoveRentableCar',
        request,
        metadata || {},
        this.methodDescriptorRemoveRentableCar,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/rentalmanagement.RentableCarsCollectionService/RemoveRentableCar',
    request,
    metadata || {},
    this.methodDescriptorRemoveRentableCar);
  }

}

export class CustomerServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRentCar = new grpcWeb.MethodDescriptor(
    '/rentalmanagement.CustomerService/RentCar',
    grpcWeb.MethodType.UNARY,
    api_specification_am_rental_management_pb.RentCarRequest,
    api_specification_am_rental_management_pb.RentCarResponse,
    (request: api_specification_am_rental_management_pb.RentCarRequest) => {
      return request.serializeBinary();
    },
    api_specification_am_rental_management_pb.RentCarResponse.deserializeBinary
  );

  rentCar(
    request: api_specification_am_rental_management_pb.RentCarRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_specification_am_rental_management_pb.RentCarResponse>;

  rentCar(
    request: api_specification_am_rental_management_pb.RentCarRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.RentCarResponse) => void): grpcWeb.ClientReadableStream<api_specification_am_rental_management_pb.RentCarResponse>;

  rentCar(
    request: api_specification_am_rental_management_pb.RentCarRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.RentCarResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/rentalmanagement.CustomerService/RentCar',
        request,
        metadata || {},
        this.methodDescriptorRentCar,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/rentalmanagement.CustomerService/RentCar',
    request,
    metadata || {},
    this.methodDescriptorRentCar);
  }

  methodDescriptorCancelRental = new grpcWeb.MethodDescriptor(
    '/rentalmanagement.CustomerService/CancelRental',
    grpcWeb.MethodType.UNARY,
    api_specification_am_rental_management_pb.CancelRentalRequest,
    api_specification_am_rental_management_pb.CancelRentalResponse,
    (request: api_specification_am_rental_management_pb.CancelRentalRequest) => {
      return request.serializeBinary();
    },
    api_specification_am_rental_management_pb.CancelRentalResponse.deserializeBinary
  );

  cancelRental(
    request: api_specification_am_rental_management_pb.CancelRentalRequest,
    metadata?: grpcWeb.Metadata | null): Promise<api_specification_am_rental_management_pb.CancelRentalResponse>;

  cancelRental(
    request: api_specification_am_rental_management_pb.CancelRentalRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.CancelRentalResponse) => void): grpcWeb.ClientReadableStream<api_specification_am_rental_management_pb.CancelRentalResponse>;

  cancelRental(
    request: api_specification_am_rental_management_pb.CancelRentalRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: api_specification_am_rental_management_pb.CancelRentalResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/rentalmanagement.CustomerService/CancelRental',
        request,
        metadata || {},
        this.methodDescriptorCancelRental,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/rentalmanagement.CustomerService/CancelRental',
    request,
    metadata || {},
    this.methodDescriptorCancelRental);
  }

}

